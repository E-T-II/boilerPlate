{"version":3,"sources":["reportWebVitals.js","components/HeaderComponent.js","components/FooterComponent.js","components/LoadingComponent.js","shared/baseUrl.js","components/DirectoryComponent.js","components/CampsiteInfoComponent.js","components/HomeComponent.js","components/ContactComponent.js","components/AboutComponent.js","redux/ActionTypes.js","redux/ActionCreators.js","components/MainComponent.js","redux/campsites.js","redux/comments.js","shared/partners.js","redux/partners.js","redux/promotions.js","redux/forms.js","App.js","redux/configureStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","props","state","isNavOpen","isModalOpen","toggleNav","bind","toggleModal","handleLogin","this","setState","event","alert","username","value","password","remember","checked","preventDefault","Fragment","Jumbotron","fluid","className","Navbar","dark","sticky","expand","NavbarBrand","href","src","height","width","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","to","Button","outline","Modal","toggle","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","htmlFor","Input","type","id","name","innerRef","input","check","color","Component","Footer","role","Loading","baseUrl","RenderDirectoryItem","campsite","Card","CardImg","image","CardImgOverlay","CardTitle","Directory","directory","campsites","map","isLoading","errMess","Breadcrumb","BreadcrumbItem","active","required","val","length","maxLength","len","CommentForm","handleSubmit","values","postComment","campsiteId","rating","author","text","select","model","validators","minLength","show","component","messages","textarea","RenderCampsite","top","CardBody","CardText","description","RenderComments","comments","comment","date","Intl","DateTimeFormat","year","month","day","format","Date","parse","CampsiteInfo","RenderCard","item","Home","promotion","promotionLoading","promotionErrMess","partner","isNumber","isNaN","validEmail","test","Contact","firstName","lastName","phoneNum","email","agree","contactType","feedback","touched","console","log","JSON","stringify","resetFeedbackForm","class","Row","md","Col","placeholder","size","offset","checkbox","rows","RenderPartner","Media","object","body","heading","About","partners","tag","CardHeader","title","list","ADD_COMMENT","CAMPSITES_LOADING","CAMPSITES_FAILED","ADD_CAMPSITES","ADD_COMMENTS","COMMENTS_FAILED","PROMOTIONS_LOADING","ADD_PROMOTIONS","PROMOTIONS_FAILED","campsitesLoading","ActionTypes","campsitesFailed","payload","addCampsites","commentsFailed","addComments","dispatch","newComment","toISOString","fetch","method","headers","response","ok","error","Error","status","statusText","json","catch","message","promotionsLoading","promotionsFailed","addPromotions","promotions","mapDispatchToProps","fetchCampsites","actions","reset","fetchComments","fetchPromotions","Main","TransitionGroup","CSSTransition","classNames","timeout","path","filter","featured","campsitesErrMess","exact","render","match","params","commentsErrMess","location","key","withRouter","connect","Campsites","action","Comments","concat","PARTNERS","Partners","Promotions","InitialFeedback","App","store","createStore","combineReducers","createForms","feedbackForm","applyMiddleware","thunk","logger","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f097a4a5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\nimport {\n    Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\n    Button, Modal, ModalHeader, ModalBody,\n    Form, FormGroup, Input, Label\n} from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport 'animate.css';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false\n        };\n\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleLogin(event) {\n        alert(`username: ${this.username.value} Password: ${this.password.value} Remember: ${this.remember.checked}`);\n        this.toggleModal();\n        event.preventDefault();\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <Jumbotron fluid>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <h1>NuCamp</h1>\n                                <h2>a better way to camp</h2>\n                            </div>\n                        </div>\n                    </div>\n                </Jumbotron>\n\n                <Navbar dark sticky=\"top\" expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarBrand className=\"mr-auto\" href=\"/\"><img src=\"/assets/images/logo.png\" height=\"30\" width=\"30\" alt=\"NuCamp Logo\" /></NavbarBrand>\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/home\">\n                                        <i className=\"fa fa-home fa-lg\" /> Home\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/directory\">\n                                        <i className=\"fa fa-list fa-lg\" /> Directory\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\n                                        <i className=\"fa fa-info fa-lg\" /> About\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/contactus\">\n                                        <i className=\"fa fa-address-card fa-lg\" /> Contact Us\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                            <span className=\"navbar-text ml-auto\">\n                                <Button outline onClick={this.toggleModal}>\n                                    <i className=\"fa-fa-sign-in fa-lg\" /> Login\n                                </Button>\n                            </span>\n                        </Collapse>\n                    </div>\n                </Navbar>\n\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.handleLogin}>\n                            <FormGroup>\n                                <Label htmlFor=\"username\">Username</Label>\n                                <Input type=\"text\" id=\"username\" name=\"username\"\n                                    innerRef={input => this.username = input} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"password\">Password</Label>\n                                <Input type=\"password\" id=\"password\" name=\"password\"\n                                    innerRef={input => this.password = input} />\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                    <Input type=\"checkbox\" name=\"remember\"\n                                        innerRef={input => this.remember = input} />\n                                    Remember me\n                                </Label>\n                            </FormGroup>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;\n\n/*\nBROWSER DOM\nbefore looking at the virtual DOM we need to look at the browser DOM (Document Object Module). the elements tab in the developers tools window gives us a representation of the DOM in real time. but the DOM is not HTML. nor is it javascript. it acts as an interface between the two. the browser DOM is an API - an application programming interface - a set of specifications for how programming languages and HTML can interface with each other.\n\nit maps html elements to a node-based, tree like application that programming languages can understand, traverse, and modify. here is an example of html below and its corresponding representation in the DOM at the following link https://www.w3.org/TR/2000/CR-DOM-Level-2-20000307/introduction.html\n<table>\n    <tbody>\n        <tr>\n            <td>shady grove</td>\n            <td>etii</td>\n        </tr>\n        <tr>\n            <td>over the river</td>\n            <td>thru the woods</td>\n        </tr>\n    </tbody>\n</table>\n\nthis representation is created by the browser using a technology called a browser engine. everytime a webpage is loaded, the browser creates this abstract model and holds it in memory. the DOM is an interface that makes it possible for you to refer to html elements and attributes using javascript objects and property syntax. so you might create a new image element node in javascript like this ...\n\nconst newImage = document.createElement(\"img\");\nnewImage.src=\"../images/someimage.png\";\n\n... then you can insert this node into the DOM\n\ndocument.body.appendChild(newImage);\n\n... using a method like appendChild which would finally be rendered by the browser into this html element like so...\n\n<body>\n...\n    <img src=\"../images/someimage.png\";\n</body>\n\nto repeat, there is an interface between a programming language like javascript and the actual code that gets rendered in the browser with html and css. The DOM is that interface. it is cross platform and language independent and can be used on all operating systems. not always used with javascript but usually so. any changes you make javascript to a web page's view causes the DOM to be recreated - the affected DOM nodes and all their children, the entire \"branch\". along with that the browser view is also re-rendered which can be an expensive process.\n\nREACT VIRTUAL DOM\nthis technique is not unique to react - react is one implementation. the react application maintains a lightweight representation of the browsers DOM in memory. it is much faster and easier to update the virtual DOM than the browser DOM because it doesn't require re-rendering of the browser view / graphical display everytime you do it. with react any changes to the DOM are first made to the virtual DOM. so if a user clicks on a button changing the color of the webpages background for example, instead of manipulating the real browser DOM directly, this change first gets made in the react virtual DOM. when changes are made to the virtual DOM, react compares the changes to the browser DOM during a process called reconciliation. this is done through its reconciliation engine named fiber. in this process it looks for which nodes have changed in the DOM tree, then figures out the most optimized way to patch the browser DOM with the changes with minimal re-rendering, such as by combining updates in batches instead of  multiple single changes.\n\nthis is the main reason developers need to use setState to change the react application state, instead of changing it directly with an assignment operator:\n\n... and so,\nwe do this >>> this.setState({selectedCampsite: campsiteID});\nnot this >>>   this.state.selectedCampsite = campsiteID;\n\nsetState sends your changes through the virtual DOM so if you dont use it you're sidestepping one of the most useful features in react.\n\nyou also learned before about setting unique key attributes when rendeering lists of react elements using map. when doing so you were helping out the react reconciliation process by giving it stable markers to track and look for when changes have been made so that it does not re-render unchanged items unnecessarily.\n\nsuch as...\nfunction Directory(props) {\n    const directory = props.campsites.map(campsite => {\n        return (\n            <div key={campsite.id} className=\"col-md-5 m-1\">\n                <RenderDirectoryItem campsite={campsite} onClick={props.onClick} />\n            </div>\n        );\n    });\n}\n\nthis helps react do its job making updates to your web app in an optimized way.\n\n*/","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nfunction Footer(props) {\n    return (\n        <footer className=\"site-footer\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-4 col-sm-2 offset-1\">\n                        <h5>Links</h5>\n                        <ul className=\"list-unstyled\">\n                            <li><Link to='/home'>Home</Link></li>\n                            <li><Link to='/directory'>Directory</Link></li>\n                            <li><Link to='/aboutus'>About</Link></li>\n                            <li><Link to='/contactus'>Contact</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"col-6 col-sm-3 text-center\">\n                        <h5>Social</h5>\n                        <a className=\"btn btn-social-icon btn-instagram\" href=\"http://instagram.com/\"><i className=\"fa fa-instagram\" /></a>{' '}\n                        <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/\"><i className=\"fa fa-facebook\" /></a>{' '}\n                        <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\" /></a>{' '}\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\" /></a>\n                    </div>\n                    <div className=\"col-sm-4 text-center\">\n                        <a role=\"button\" className=\"btn btn-link\" href=\"tel:+12065551234\"><i className=\"fa fa-phone\" /> 1-206-555-1234</a><br />\n                        <a role=\"button\" className=\"btn btn-link\" href=\"mailto:notreal@notreal.co\"><i className=\"fa fa-envelope-o\" /> campsites@nucamp.co</a>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n\nexport const Loading = () => {\n    return (\n        <div className=\"col\">\n            <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\" />\n            <p>Loading...</p>\n        </div>\n    );\n};","export const baseUrl = 'http://localhost:3001/';\n","import React from 'react';\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Loading } from './LoadingComponent';\nimport { baseUrl } from '../shared/baseUrl';\n\n\n\nfunction RenderDirectoryItem({ campsite }) {\n    return (// creating a dynamic link with vanilla js\n        <Card>\n            <Link to={`/directory/${campsite.id}`}>\n                <CardImg width=\"100%\" src={baseUrl + campsite.image} alt={campsite.name} />\n                <CardImgOverlay>\n                    <CardTitle>{campsite.name}</CardTitle>\n                </CardImgOverlay>\n            </Link>\n        </Card>\n    );\n}\n\nfunction Directory(props) {\n    const directory = props.campsites.campsites.map(campsite => {\n        return (\n            <div key={campsite.id} className=\"col-md-5 m-1\">\n                <RenderDirectoryItem campsite={campsite} />\n            </div>\n        );\n    });\n\n    if (props.campsites.isLoading) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    if (props.campsites.errMess) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h4>{props.campsites.errMess}</h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>Directory</BreadcrumbItem>\n                    </Breadcrumb>\n                    <h2>Directory</h2>\n                    <hr />\n                </div>\n            </div>\n            <div className=\"row\">\n                {directory}\n            </div>\n        </div>\n    );\n}\n\nexport default Directory;\n\n\n\n/*\nWe can store data inside the object stored in the state property. Because it is local other parts of the app cannot see it unless we pass it by including it as an\nattribute when we render component B inside component A. Let's create an example\n\nclass ExampleParent Component extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: 333\n        }\n    }\n    render() {\n        return  <ExampeChildComponent number = {this.state.number} />;\n    }\n}\n\nclass ExampleChildComponent extends Component {\n    render() {\n        return <div>{this.props.number}</div>\n    }\n}\n\nSince there is an array of elements, must provide the top most element\nwith a unique key as an attribute.\n--<div className=\"row\">\n    <div className=\"col-md-5 m-1\">\n        {this.renderSelectedCampsite(this.state.selectedCampsite)}\n    </div>\n--</div>\n\nREACT ROUTER PARAMETERS: EXPLAINED\nGoogle is your friend\n-- react-router\n-- react-router-dom\n-- React Router Documentation\n-- React Router Dom Documentation\n\nOther Resources\n-- Arrow Functions\n-- Single Page Applications (Wikipedia)\n-- Deep linking\n-- Single Page Apps in depth\n-- SPA and the Single Page Myth\n*/","import React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, Breadcrumb, BreadcrumbItem, Button, Modal, Label, ModalBody } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { Loading } from './LoadingComponent';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\nconst formatDate = (date) => {\n    return new Intl.DateTimeFormat(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"2-digit\",\n    }).format(new Date(Date.parse(date)));\n};\n\nclass CommentForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false\n        };\n\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit(values) {\n        this.toggleModal();\n        this.props.postComment(this.props.campsiteId, values.rating, values.author, values.text);\n    }\n\n    render() {\n        return (\n            <div>\n                <Button outline className=\"fa fa-pencil fa-lg\" onClick={this.toggleModal}>Submit Comment</Button>{' '}\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalBody>\n                        <LocalForm onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <Label htmlFor=\"rating\">Rating</Label>\n                                <Control.select className=\"form-control\" model=\".rating\" id=\"rating\" name=\"rating\">\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                </Control.select>\n                            </div>\n                            <div className=\"form-group\">\n                                <Label htmlFor=\"author\">Your Name</Label>\n                                <Control.text className=\"form-control\" model=\".author\" id=\"author\" name=\"author\"\n                                    validators={{\n                                        required, \n                                        minLength: minLength(2),\n                                        maxLength: maxLength(15)\n                                    }}\n                                />\n                               <Errors\n                                    className=\"text-danger\"\n                                    model=\".author\"\n                                    show=\"touched\"\n                                    component=\"div\"\n                                    messages={{\n                                        required: 'Required',\n                                        minLength: 'Must be at least 2 characters',\n                                        maxLength: 'Must be 15 characters or less',\n                                    }}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <Label htmlFor=\"text\">Comment</Label>\n                                <Control.textarea className=\"form-control\" model=\".text\" id=\"text\" name=\"text\"/>\n                            </div>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\n                        </LocalForm>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nfunction RenderCampsite({ campsite }) {\n    return (\n        <div className=\"col-md-5 m-1\">\n            <Card>\n                <CardImg top src={baseUrl + campsite.image} alt={campsite.name} />\n                <CardBody>\n                    <CardText>{campsite.description}</CardText>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nfunction RenderComments({comments, postComment, campsiteId}) {\n    if (comments) {\n        return (\n            <div className=\"col-md-5 m-1\">\n                <h4>Comments</h4>\n                {comments.map(comment => {\n                    return (\n                        <div key={comment.id}>\n                            {comment.text}\n                            <p>-- {comment.author}, {formatDate(comment.date)}</p>\n                        </div>\n                    )\n                })}\n                <CommentForm campsiteId={campsiteId} postComment={postComment} />\n            </div>\n        )// above you can see where we've used object destructuring in the parameter list to grab the props addComment and campsiteId and pass them again to the CommentForm child component. Then we'll use these props in the handleSubmit method. \n    }\n    return <div />\n}\n\nfunction CampsiteInfo(props) {\n    if (props.isLoading) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    if (props.errMess) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h4>{props.errMess}</h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    if (props.campsite) { //call the renderCampsite method and pass the campsite to it. Use \"this\" where appropriate in two places.\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Breadcrumb>\n                            <BreadcrumbItem><Link to=\"/directory\">Directory</Link></BreadcrumbItem>\n                            <BreadcrumbItem active>{props.campsite.name}</BreadcrumbItem>\n                        </Breadcrumb>\n                        <h2>{props.campsite.name}</h2>\n                        <hr />\n                        <RenderCampsite campsite={props.campsite} />\n                        <RenderComments\n                            comments={props.comments}\n                            postComment={props.postComment}\n                            campsiteId={props.campsite.id}\n                        /> \n                    </div>\n                </div>\n            </div>\n        );// above we can see where we've passed the addComment prop along to the RenderComments component along with the campsiteId. \n    }\n    return <div />;\n}\n\n\nexport default CampsiteInfo\n\n\n/*\n--- INTRO TO REACT ---\nref App.js: export default App is the default export for entire file.nInside index.js you can see where the App is imported listing the location and file name it comes from. \"./\" tells index.js to look for the App file in the same locations as itself.\n\nWith named non default exports you have to use the curly braces whenever you export them such as \"export { App };\" which must also match the import within the index.js file.\n\n--- REACT COMPONENTS ---\nYou can tell when a React component is being used or rendered by two things;\n1. It's inside angle brackets like JSX or HTML tag and 2. The first letter is capitalized.\n\nThink of React Components like functions - repeatable blocks of code.\n\nLike a function it is defined and called with two different syntax'.\n\nSuch as:\nfunction sayHi(name) { // define function\n    console.log(`Hi ${name}!`);\n}\nsayHi('Bob'); // call function\n\nSimilarly, React Components are defined one way and called another way. However with React components, we say you \"render\"\nthe component instead of calling it - because components are units of UI to be rendered to the user's browser.\n\nTo define React Components you may use Functional Components or Class Components, as with App.js.\nTherefore, you use the keyword \"class\" followed by component name, then keywords \"extends\" (creates child class from parent)\nand \"Component\", which is imported from the React library. Then inside curly braces a React component will always have a return\nstatement.\n\nFor a class component the return statement must be placed within the method render (which takes no arguments), as this is how we call React components.\nThe return statement must return a single/ONE (no more, no less) React element typically using JSX... The outer most element.\n\nWhenever creating a class component that has a constructor you must include the \"props\" argument, short for properties. Then inside it you have to add super(props); This way we don't have to say this.props = props within the constructor, that will take place in the base component of the Parent class. Every React component made with a constructor method you will use super(props) as the first line of constructor method. It is a React requirement.\n\nThen we set up a property named state via \"this.state = {object};\" It is defined inside the constructor. The state property must always hold an object. And if a component has a state property it must have a constructor.\n\nEvery React component must return a React element and every return statement must be wrapped in a render method. Lastly we'll write the export statement, which isn't required for the component per se' but it's kind of useless without the export.\n\nWe can store data inside the object stored in the state property. Because it is local other parts of the app cannot see it unless we pass it by including it as an\nattribute when we render component B inside component A. Let's create an example\n\nclass ExampleParent Component extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: 333\n        }\n    }\n    render() {\n        return  <ExampeChildComponent number = {this.state.number} />;\n    }\n}\n\nclass ExampleChildComponent extends Component {\n    render() {\n        return <div>{this.props.number}</div>\n    }\n}\n\n*/","import React from 'react';\nimport {Card, CardImg, CardTitle, CardText, CardBody} from 'reactstrap';\nimport { Loading } from './LoadingComponent';\nimport { baseUrl } from '../shared/baseUrl';\n//import { FadeTransform } from 'react-animation-components';\n\n\nfunction RenderCard({item, isLoading, errMess}) {\n    if (isLoading) {\n        return <Loading />;\n    }\n    if (errMess) {\n        return <h4>{errMess}</h4>;\n    }\n    return (\n        <Card>\n            <CardImg src={baseUrl + item.image} alt={item.name} />\n            <CardBody>\n                <CardTitle>{item.name}</CardTitle>\n                <CardText>{item.description}</CardText>\n            </CardBody>\n        </Card>\n    );\n}\n\nfunction Home(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md m-1\">\n                   <RenderCard\n                        item={props.promotion}\n                        isLoading={props.promotionLoading}\n                        errMess={props.promotionErrMess}\n                    />               \n                </div>\n                <div className=\"col-md m-1\">\n                    <RenderCard item={props.promotion} />\n                </div>\n                <div className=\"col-md m-1\">\n                    <RenderCard item={props.partner} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n\n/*\nREACT ROUTER PARAMETERS: WHAT? HOW? WHY?\nin the web app clicking on the cards no longer displays info for the site. we can use parameter in react router to access the info. we can set it up so when the card is clicked the react code will grab the id of that campsite and add it to the path. the urls will not be hardcoded but generated automatically based on campsite data. the route component will use the id portion of the url and send the campsite object with that id to the campsite info component and render the information for that campsite. to let the route component know that this part at the directory is going to be a dynamic route parameter we will use this attribute below...\n\n<Route path='/directory/:campsiteID'\n\nthe colon will cause the route component to grab whatever string occurs after 'directory' in the path and store the string in a route parameter called campsiteID. that route parameter is a property of the route component state. specifically its stored inside a state object called match as a property named params. we can look inside the react dev tools components tool, and if we look inside the route component we can see that it has a state with a match object and a params property which is also an object. in that, is the campsiteID with it corresponding value. clicking on each campsite we can see how it changes. using the ID we can pull the campsite object with that ID and that object is then passed into the campsite info component. \n*/","import React, { Component } from 'react';\nimport {\n    Breadcrumb, BreadcrumbItem,\n    Button, Label, Col, Row\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, Form, Errors } from 'react-redux-form';\n\nimport 'animate.css';\n\n\nconst required = val => val && val.length;\nconst maxLength = len => val => !val || (val.length <= len);\nconst minLength = len => val => val && (val.length >= len);\nconst isNumber = val => !isNaN(+val);\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\n\nclass Contact extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phoneNum: '',\n            email: '',\n            agree: false,\n            contactType: 'By Phone',\n            feedback: '',\n            touched: {\n                firstName: false,\n                lastName: false,\n                phoneNum: false,\n                email: false,\n            }\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values) {\n        console.log('Current State is: ' + JSON.stringify(values));\n        alert('Current State is: ' + JSON.stringify(values));\n        this.props.resetFeedbackForm();\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Breadcrumb>\n                            <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us</BreadcrumbItem>\n                        </Breadcrumb>\n                        <h2 class=\"animate__animated animate__bounce\">Contact Us</h2>\n                        <hr />\n                    </div>\n                </div>\n                <div className=\"row row-content align-items-center\">\n                    <div className=\"col-sm-4\">\n                        <h5 class=\"animate__animated animate__bounce\">Our Address</h5>\n                        <address class=\"animate__animated animate__bounce\">\n                            1 Nucamp Way<br />\n                            Seattle, WA 98001<br />\n                            U.S.A.\n                        </address>\n                    </div>\n                    <div className=\"col\" class=\"animate__animated animate__bounce\">\n                        <a role=\"button\" className=\"btn btn-link\" href=\"tel:+12065551234\"><i className=\"fa fa-phone\" /> 1-206-555-1234</a><br />\n                        <a role=\"button\" className=\"btn btn-link\" href=\"mailto:fakeemail@fakeemail.co\"><i className=\"fa fa-envelope-o\" /> campsites@nucamp.co</a>\n                    </div>\n                </div>\n\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h2 class=\"animate__animated animate__bounce\">Send us your Feedback</h2>\n                        <hr />\n                    </div>\n                    <div className=\"col-md-10\">\n                        <Form model=\"feedbackForm\" onSubmit={values => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstName\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstName\" id=\"firstName\" name=\"firstName\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastName\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastName\" id=\"lastName\" name=\"lastName\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(2),\n                                            maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastName\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"phoneNum\" md={2}>Phone</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".phoneNum\" id=\"phoneNum\" name=\"phoneNum\"\n                                        placeholder=\"Phone number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(10),\n                                            maxLength: maxLength(15),\n                                            isNumber\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".phoneNum\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be at least 10 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            validEmail\n                                        }}\n                                    />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        component=\"div\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid email address'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{ size: 4, offset: 2 }}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox\n                                                model=\".agree\"\n                                                name=\"agree\"\n                                                className=\"form-check-input\"\n                                            /> {' '}\n                                            <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={4}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                        className=\"form-control\">\n                                        <option>By Phone</option>\n                                        <option>By Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"feedback\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".feedback\" id=\"feedback\" name=\"feedback\"\n                                        rows=\"12\"\n                                        className=\"form-control\"\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{ size: 10, offset: 2 }}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Contact;\n\n/*\n\n\nTHE MVC Design Pattern\n\n\nJSX has a few differences than html such as the way it treats white space. the curly braces above to right of the social icons show that a javascript expression is being used. then there is a pair of single quotes around the space. however, there are other ways to create white space. also the \"i\" tags are self closing which cannot be so in html. jsx allows you to turn any element into a self closing one if there is not content in the start and end tag. even if not permitted in html, it will work in jsx.\n\nSINGLE PAGE APPLICATIONS\nwe noted before that in bootstrap you had a different html page for each of the different views in the website. but you probably noticed that all the pages had some things in common; a header, a footer, a navbar, and etc. but everytime you navigated to a different page all those parts were being requested from the server and re-rendered again in the browser. a single page application or SPA, is a concept where all the frontend application code (html, css, js) is downloaded when you first load the website into your browser. some examples of SPA is gmail, google maps, and facebook. then when switching between views inside the app, instead of requesting the server for all the code in that view, the app code makes the minimum necessary server requests and re-renders only the components that have changed. you might still make server requests for backend resources such as data from databases but the frontend application code is already in your browser. so it's almost like a native or desktop application thats downloaded to your comoputer while you have it open in your browser. (CAN MALICIOUS FILES PERFORM THE SAME WAY?). there are both pros and cons to SPA.\n\nPROS - typically much faster user experience due to fewer server requests. development is streamlined and easier to divide back end and front end tasks during development. because of this decoupling on the front end and back end code, you can easily used the back end code for mobile app development. SPA is easy to debug in the browser.\n\nCONS - search engines are designed to index websites that have a traditional multi page structure so they can have trouble crawling SPAs. therefore, SPAs are better for sites which are placed behind a login/authentication that would not be indexed anyway. SPAs require js to be enabled in the browser (WHY IS THIS AN ISSUE?) initial download of application can be slow. this can somewhat be mitigated for very large SPAs by having the server side handle some of the rendering. you must also be careful for memory leaks in your application as they can be more harmful than a traditional multi page website.\n\nwhile not exactly a con since there are solutions for it, one major consideration for an SPA is how to handle navigation. since you're not using a traditional browser navigation of going to different html pages. that includes not only being able to click navaigation links to be directed to a different view but also being able to use the browsers back and forward buttons to go back and forward in your browsing history.this is what react router provides for react.\n*/","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nfunction RenderPartner({ partner }) {\n    if (partner) {\n        return (\n            <React.Fragment>\n                <Media object src={partner.image} alt={partner.name} width=\"150\" />\n                <Media body={true} className=\"ml-5 mb-4\">\n                    <Media heading={true}>\n                        {partner.name}\n                    </Media>\n                    {partner.description}\n                </Media>\n            </React.Fragment>\n        )\n    } return (\n        <div />\n    )\n}\n\nfunction About(props) {\n\n    const partners = props.partners.map(partner => {\n        return (\n            <Media tag=\"li\" key={partner.id}>\n                <RenderPartner partner={partner} />\n            </Media>\n        );\n    });\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>About Us</BreadcrumbItem>\n                    </Breadcrumb>\n                    <h2>About Us</h2>\n                    <hr />\n                </div>\n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-sm-6\">\n                    <h3>Our Mission</h3>\n                    <p>We present a curated database of the best campsites in the vast woods and backcountry of the World Wide Web Wilderness. We increase access to adventure for the public while promoting safe and respectful use of resources. The expert wilderness trekkers on our staff personally verify each campsite to make sure that they are up to our standards. We also present a platform for campers to share reviews on campsites they have visited with each other.</p>\n                </div>\n                <div className=\"col-sm-6\">\n                    <Card>\n                        <CardHeader className=\"bg-primary text-white\"><h3>Facts At a Glance</h3></CardHeader>\n                        <CardBody>\n                            <dl className=\"row\">\n                                <dt className=\"col-6\">Founded</dt>\n                                <dd className=\"col-6\">February 3, 2016</dd>\n                                <dt className=\"col-6\">No. of Campsites in 2019</dt>\n                                <dd className=\"col-6\">563</dd>\n                                <dt className=\"col-6\">No. of Reviews in 2019</dt>\n                                <dd className=\"col-6\">4388</dd>\n                                <dt className=\"col-6\">Employees</dt>\n                                <dd className=\"col-6\">42</dd>\n                            </dl>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"col\">\n                    <Card className=\"bg-light mt-3\">\n                        <CardBody>\n                            <blockquote className=\"blockquote\">\n                                <p className=\"mb-0\">I will not follow where the path may lead, but I will go where there is no path, and I will leave a trail.</p>\n                                <footer className=\"blockquote-footer\">Muriel Strode,{' '}\n                                    <cite title=\"Source Title\">\"Wind-Wafted Wild Flowers\" -\n                                        The Open Court, 1903</cite>\n                                </footer>\n                            </blockquote>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12\">\n                    <h3>Community Partners</h3>\n                </div>\n                <div className=\"col mt-4\">\n                    <Media list>\n                        {partners}\n                    </Media>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default About;\n\n/*\n\n*/","export const ADD_COMMENT = 'ADD_COMMNENT';\nexport const CAMPSITES_LOADING = 'CAMPSITES_LOADING';\nexport const CAMPSITES_FAILED = 'CAMPSITES_FAILED';\nexport const ADD_CAMPSITES = 'ADD_CAMPSITES';\n\nexport const ADD_COMMENTS = 'ADD_COMMENTS';\nexport const COMMENTS_FAILED = 'COMMENTS_FAILED';\nexport const PROMOTIONS_LOADING = 'PROMOTIONS_LOADING';\nexport const ADD_PROMOTIONS = 'ADD_PROMOTIONS';\nexport const PROMOTIONS_FAILED = 'PROMOTIONS_FAILED';\n\n/*\n\nWe'll create two folders: ActionTypes.js and ActionCreators.js\n\nexport const ADD_COMMENT = 'ADD_COMMNENT';\n\nThe previous code will create a variable named 'ADD_COMMENT' and set it's value to the string \"ADD_COMMENT\" and exporting it. \n\nThen in the ActionCreators.js file we will ....\n\nimport * as ActionTypes from './ActionTypes';\n\n... which will import from the ActionTypes.js module using a wildcard. The asterisk acts as a wildcard that lets us import all the named exports from the ActionTypes.js file at once. Of course, we see there is only one named export at the moment. We may also access the exports using the ActionTypes name space defined with 'as ActionTypes'\n\nNext we define an ActionCreators function with the name 'addComment'...\n\nexport const addComment = (campsiteId, rating, author, text) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n        campsiteId: campsiteId,\n        rating: rating,\n        author: author,\n        text: text\n    }\n});\n\n... as we can see we pass in all necessary values to add a comment: campsiteID, rating, &tc. It is set up to return an object which has as its properties a type, and a payload. For the type, we use the ActionTypes name space that we defined above. Then dot 'ADD_COMMENT'. This lets us access the ADD_COMMENT export. Without defining it explicitly here in the import. \n\nNext for the payload property we pass in the necessary values necessary to leave a comment.\n\nIt's worth noticing that in ES6 JS that when the identifer of a property is the same as its value ...\n\n(i.e.   campsiteId: campsiteId, rating: rating, author: author, text: text)\n\n... we can pass like this\n\n    payload: {\n        campsiteId,\n        rating,\n        author,\n        text\n    }\n\n... which will work the same way as before. This is a new feature in ES6 called shorthand property names. \n\n\n\n*/","import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n//import { CAMPSITES } from '../shared/campsites';\n/* \n\nexport const campsitesLoading = () => ({\n    type: ActionTypes.CAMPSITES_LOADING\n});\n\nexport const campsitesFailed = errMess => ({\n    type: ActionTypes.CAMPSITES_FAILED,\n    payload: errMess\n});\n\nexport const addCampsites = campsites => ({\n    type: ActionTypes.ADD_CAMPSITES,\n    payload: campsites\n});*/\n\n/*\nexport const addComment = (campsiteId, rating, author, text) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n        campsiteId: campsiteId,\n        rating: rating,\n        author: author,\n        text: text\n    }\n});\n*/\n\nexport const fetchCampsites = () => dispatch => {\n    dispatch(campsitesLoading());\n\n    return fetch(baseUrl + 'campsites')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(campsites => dispatch(addCampsites(campsites)))\n        .catch(error => dispatch(campsitesFailed(error.message)));\n};\n\nexport const campsitesLoading = () => ({\n    type: ActionTypes.CAMPSITES_LOADING\n});\n\nexport const campsitesFailed = errMess => ({\n    type: ActionTypes.CAMPSITES_FAILED,\n    payload: errMess\n});\n\nexport const addCampsites = campsites => ({\n    type: ActionTypes.ADD_CAMPSITES,\n    payload: campsites\n});\n\nexport const fetchComments = () => dispatch => {\n    return fetch(baseUrl + 'comments')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = errMess => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errMess\n});\n\nexport const addComments = comments => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const addComment = comment => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\n    \n    const newComment = {\n        campsiteId: campsiteId,\n        rating: rating,\n        author: author,\n        text: text\n    };\n    newComment.date = new Date().toISOString();\n\n    return fetch(baseUrl + 'comments', {\n            method: \"POST\",\n            body: JSON.stringify(newComment),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => { throw error; }\n        )\n        .then(response => response.json())\n        .then(response => dispatch(addComment(response)))\n        .catch(error => {\n            console.log('post comment', error.message);\n            alert('Your comment could not be posted\\nError: ' + error.message);\n        });\n};\n\nexport const fetchPromotions = () => dispatch => {\n    dispatch(promotionsLoading());\n\n    return fetch(baseUrl + 'promotions')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(promotions => dispatch(addPromotions(promotions)))\n        .catch(error => dispatch(promotionsFailed(error.message)));\n};\n\nexport const promotionsLoading = () => ({\n    type: ActionTypes.PROMOTIONS_LOADING\n});\n\nexport const promotionsFailed = errMess => ({\n    type: ActionTypes.PROMOTIONS_FAILED,\n    payload: errMess\n});\n\nexport const addPromotions = promotions => ({\n    type: ActionTypes.ADD_PROMOTIONS,\n    payload: promotions\n});\n/*\n\nREDUX MIDDLEWARE\nIntercepts an action before it reches the reducer and allows you to change it or cause a side effect to happen, apart from updating the application state - third party extension point. For example, we might want to write a message to a log file or we might want to make a server request and wait for the server to respond. This is where Redux middleware can help. Redux middleware provides the capability to run code after an action is dispatched and before it reaches the reducer. So middleware provides a point where you can inject 3rd party extensions that can respond to an action.\n\nRedux middleware wraps around the action dispatch then inserts code to deal witht he asynchronous operation before passing the action forward. Aside from logging and making asynch calls there are many other uses for middleware such as crash reporting, stopping an action from reaching the reducer under certain conditions, dispatching other actions, and so on. You can also chain middleware so you can run multiple third party extension libraries in sequence. The way to insert Redux middleware is via the Redux applyMiddleware() function, which is passed as a parameter to createStore() function.\n\nOne straight forward example is Redux logger. Lets look at an example of how the Redux logger library works. Once installed and added to the React app, it will by default show a log in the console of every single action that is dispatched. The log will show the application state prior to the action being applied, then the contents of the action object, then the new state after the reducer has applied the action. The logger can be very useful in debugging.\n\nASYNCHRONOUS CALLS\nRedux middleware is also used to deal with asynchronous calls. With Synchronous code, whenever something is executed the application waits until it's finished before continuing. This means nothing ever happens out of order by mistake. But this can be very slow. What if everytime you tried to copy a bunch of files from one folder to another in your computer and the whole computer froze and you couldn't do anything else until the copy operation was finished? That is what synchronous code is like.\n\nAsynchronous code on the other hand will let you start something, then continue with teh program without waiting for it to finish, the results of the asynchronous call are dealt with later.\n\nCommon asynchronous calls are when client side code requests data from a server and must wait for a response before using the data. This data is not available right away. The request has to go over the internet, then the server has to respond. Typically this is very quick there is still a small delay while that happens. So if you request the data then try to use the data right away you may enounter an error because that data isn't available yet.\n\nREDUX THUNK\nOne of the most useful middleware libraries. The term \"thunk\" is a programming technique where you wrap a function inside another function to delay its execution until its needed. This technique is very handy with Thunk because it lets you inject extra operations into an action creator. Normally an action creator has one job, which is to create and return an action object.\n\n\"Redux Thunk middleware allows you to write action creator that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and getState as parameters.\"\n\nNormally Redux is set up where the action creator function is expected to return an object which is sent directly to the reducer. Redux Thunk enables you to use that action creator to delay, stop, or change that dispatch and is the most common way to handle the set up of simple asynchronous logic in Redux action creators.\n\nALTERNATIVE TO REDUX THUNK\nThere are other ways to handle the set up of simple asynchronous logic in Redux action creators such as Redux-Saga, which is a more advanced library suitable for handling complex asynchronous logic. [ L E A R N * * * * R E D U X - S A G A * * * * ]\n\nRedux-observable is another library similar to saga... and there are others.\n\n*/","// function imports \nimport React, { Component } from 'react';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport Directory from './DirectoryComponent';\nimport CampsiteInfo from './CampsiteInfoComponent';\n/*import { CAMPSITES } from '../shared/campsites';\nimport { COMMENTS } from '../shared/comments';\nimport { PARTNERS } from '../shared/partners';\nimport { PROMOTIONS } from '../shared/promotions'; */\nimport Home from './HomeComponent';\nimport Contact from './ContactComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport About from './AboutComponent';\nimport { postComment, fetchCampsites, fetchComments, fetchPromotions } from '../redux/ActionCreators';\nimport { actions } from 'react-redux-form';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\n\n// we can set up mapDispatchToProps as a function or an object, which is recommended. below its set up as a constant with its property(ies). The addComment property is set up as an arrow function with a parameter list. Then in the arrow function body we call the action creator addComment passing in the parameter list data. Then at the bottom of the file in the export, we'll add the mapDispatchToProps object inside the connect function as the second argument. This will make the action addComment creator available inside the MainComponent as a prop. Then in the render method of MainComponent where we're rendering the CampsiteInfo component we pass the add comment function into it as a prop. This will require us to update the CampsiteInfo.js file to use that addComment action creator function. \nconst mapDispatchToProps = {\n    postComment: (campsiteId, rating, author, text) => (postComment(campsiteId, rating, author, text)),\n    fetchCampsites: () => (fetchCampsites()),\n    resetFeedbackForm: () => (actions.reset('feedbackForm')),\n    fetchComments: () => (fetchComments()),\n    fetchPromotions: () => (fetchPromotions())\n};\n\nconst mapStateToProps = state => {\n    return {\n        campsites: state.campsites,\n        comments: state.comments,\n        partners: state.partners,\n        promotions: state.promotions\n    };\n};\n\nclass Main extends Component {\n\n    //built in method of react called lifecyle methods which inlcude render(), componentDidUpdate(), componentWillUnmount(), componentDidMount()\n    componentDidMount() {\n        this.props.fetchCampsites();\n        this.props.fetchComments();\n        this.props.fetchPromotions();\n    }\n\n    render() {\n\n        const HomePage = () => {\n            return (\n                <Home\n                    campsite={this.props.campsites.campsites.filter(campsite => campsite.featured)[0]}\n                    campsitesLoading={this.props.campsites.isLoading}\n                    campsitesErrMess={this.props.campsites.errMess}\n                    promotion={this.props.promotions.promotions.filter(promotion => promotion.featured)[0]}\n                    promotionLoading={this.props.promotions.isLoading}\n                    promotionErrMess={this.props.promotions.errMess}\n                    partner={this.props.partners.filter(partner => partner.featured)[0]}\n                />\n            );\n        }\n\n        const CampsiteWithId = ({ match }) => {\n            return (\n                <CampsiteInfo\n                    campsite={this.props.campsites.campsites.filter(campsite => campsite.id === +match.params.campsiteId)[0]}\n                    isLoading={this.props.campsites.isLoading}\n                    errMess={this.props.campsites.errMess}\n                    comments={this.props.comments.comments.filter(comment => comment.campsiteId === +match.params.campsiteId)}\n                    commentsErrMess={this.props.comments.errMess}\n                    postComment={this.props.postComment}\n                />\n            );\n        };\n\n        return (\n            <div>\n                <Header />\n                <TransitionGroup>\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\n                        <Switch>\n                            <Route path='/home' component={HomePage} />\n                            <Route exact path='/directory' render={() => <Directory campsites={this.props.campsites} />} />\n                            <Route path='/directory/:campsiteId' component={CampsiteWithId} />\n                            <Route exact path='/contactus' render={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\n                            <Route exact path='/aboutus' render={() => <About partners={this.props.partners} />} />\n                            <Redirect to='/home' />\n                        </Switch>\n                    </CSSTransition>\n                </TransitionGroup>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n\n\n/*\nJAVASCRIPT: OBJECT DESTRUCTURING/DESTRUCTURING ASSIGNMENT SYNTAX\nintroduced in ES6 and gives us a shortcut for accessing properties inside objects, or items inside arrays, and assigning them as values in new variables.\n\nconst hotel = { // this is an object. and this is object destructuring >>> const {id, city, name} = hotel\n    id: 0,\n    city: \"Honolulu\",\n    name: \"hotel Honolulu\",\n};\n\n\nnow assuming we needed to pull out each of these properties in a new variable.\n\n****** the OLD way would be to ...\nconst id = hotel.id;\nconst city = hotel.city;\nconst name = hotel.name;\n\ntyping the new variables into a console would display the object properties.\n\n****** the NEW way would be to ...\nconst {id, city, name} = hotel;\n\nit may look at due to curly braces being on the left side of the assignment opposed to the right. typing the new variables into a console would likewise display the object properties. we can do the same thing passing an object into a function.\n\nfunction logHotelInfo1(hotel) {\n    const id = hotel.id;\n    const name = hotel.name;\n    const city = hotel.city;\n    console.log(`${id}: ${name} located in ${city}.`);\n}\nwe would call this function with ... logHotelInfo1(hotel);\n\nto do the same thing with object destructuring we would ...\nfunction logHotelInfo2({id, name, city}) {\n    console.log(`${id}: ${name} located in ${city}.`);\n}\nwe call the object the same as before by ... logHotelInfo2(hotel);\n\nso whenever curly braces are seen on the left side of the assignment operator, or curly braces used in the parameter list of a function definition that is a clue that destructuring is taking place. therefore,\n\nconst{property1, property2} = someObject;\n\nfunction someFunction({property1, property2}) {\n    ...\n}\nthis is how to read it: it is saying here is an object, look inside it for these property names, then assign their values to their variables using the same property names. So, using the code example above, the variable property1 is created with the value from someObject.property1, and the variable property2 is created with the value from someObject.property2\n\nthis is not the only way that object destructuring or the destructuring assignment syntax' can be used, this is just an introduction. there are other ways to use the object destructuring syntax, it applies to arrays as well. to learn more Google it (Javascript.info - distructuring assignment, MDN - object destructuring, codeburst - ES6 destructuring: the complete guide.\n\nE X E R C I S E:\nCONTAINER COMPONENTS\nfetch and manage state data and pass state data to presentational child components for rendering. they do not do any rendering themselves. not all react components are required to render part of the UI. container components are focused on handling management of data instead.\n\nPRESENTATIONAL COMPONENTS\nare strictly focused on the UI with styles, color, positioning, etc. As a result they typically will not hold any state data and only use the data handed down to them as props. if they do hold state data they will typically only hold data regarding the current state of the UI such as the window size or if a modal is open.\n\nnow, these are not formal classifications in react. you may find others using different terms relating to the same concepts. you may here fat vs skinny / smart vs dumb / stateful vs stateless. this is not meant to be a strict or dogmatic rule for react components. components don't have to be container or presentational based components. but it is often a useful way to organize components.\n\nFUNCTIONAL COMPONENTS\nthus, we've learned there are two ways to define components ^^^.\nwe also have 1.function declaration, 2.function expression, or 3.arrow function.\n1.function Example(props){...}\n2.const Example = function(props){...}\n3.const Example = props =>{...}\n\ntypically will only see 1.function declarations and 3.arrow functions. like with all \"components\" first letter must be capital as in Example and must accept \"props\" as an argument. like class components they will always return at least one react element but they do not use a render method around the return and will never have a constructor method. another difference is when referring to props in a function component you do not use the \"this\" key word.\n\nfunction Example(props) {\n    return <div>{props.someData}</div>;\n}\n\nthe class component equivalent of this Example functional component is written as ...\nclass Example extends Component {\n    render() {\n        return <div>{this.props.someData}</div>;\n    }\n}\nthe two code blocks are equivalent\n\nno render(), no constructor method; cannot hold state, cannot use lifecycle methods.\nNOTE: a recent version of react(v.16.8) introduced an addition called HOOKS that provides ways for functional components to access state and lifecycle methods;\nwe will use the established way of using class components for these purposes in this course, but we recommend exploring the use of HOOKS following this course. with HOOKS functional components are able to hold state and act more like class components.\n\nE X E R C I S E:\nFUNCTIONAL COMPONENTS cont.\npreviously we turned the Directory and CampsiteInfo components into purely presentational components that do not contain or manage any state. they simply render parts of the view using props that are passed down to them from the Main component. such components are great candidates to be turned into functional components.\n*/","//import { CAMPSITES } from '../shared/campsites';\nimport * as ActionTypes from './ActionTypes';\n\nexport const Campsites = (state = {\n        isLoading: true,\n        errMess: null,\n        campsites: []\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_CAMPSITES:\n            return {...state, isLoading: false, errMess: null, campsites: action.payload};\n        case ActionTypes.CAMPSITES_LOADING:\n            return {...state, isLoading: true, errMess: null, campsites: []};\n        case ActionTypes.CAMPSITES_FAILED:\n            return {...state, isLoading: false, errMess: action.payload};\n        default:\n            return state;\n    }\n};\n\n\n/*\n\nREDUX ACTIONS\nPlain JS objects containing payloads of information to be sent to the Redux store.\nActions are the only way updates are sent to the store.\nThe only REQUIRED property for an action is 'type' (a unique string).\nBest practice is to gather all action types and declare them as exported string constants in a separate module.\n\nExample of the actions type:\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const CAMPSITES_LOADING = 'CAMPSITES_LOADING';\nexport const CAMPSITES_FAILED = 'CAMPSITES_FAILED';\nexport const ADD_CAMPSITES = 'ADD_CAMPSITES';\nexport const ADD_COMMENTS = 'ADD_COMMENTS';\nexport const COMMENTS_FAILED = 'COMMENTS_FAILED';\nexport const PROMOTIONS_LOADING = 'PROMOTIONS_LOADING';\nexport const ADD_PROMOTIONS = 'ADD_PROMOTIONS';\nexport const PROMOTIONS_FAILED = 'PROMOTIONS_FAILED';\n\nDISPATCHING AN ACTION\nAn action gets dispatched by a React component and responds to some user interaction with the view. This could be the user loading a new view or clicking a button.\nWhen Redux is used with React you will never dispatch the action directly - you will supply an argument called 'mapDispatchToProps' to the 'connect()' function, which will call the store's dispatch method for you.\n\nWhenever an action is dispatched, a new action object must be created. There is a special type of function in Redux called an 'action creator' that will create the object in a consistent error-free way.\n\nExample:\nexport const addCamsites = campsites => ({\n    type: ActionTypes.ADD_CAMPSITES,\n    payload: campsites\n});\n\nThis action creator will add an array of campsites to the Redux store. It has the required 'type' property and it has another property called 'payload'. We have to call the identifier for the type property 'type'. The identifier here, payload, is arbitrary. You could choose to call it something else. You could of called it campsites or data. For example you could have other properties here aside from type and payload as well. There is not a limit to the number of properties you can have in an action. For this particular action, the payload contains an array of campsites that's received as a function parameter.\n\nNotice that since the above code is an arrow function and we're only returning one thing, which is the object inside the parentesis, we don't have to use the return keyword. Remember that with arrow functions if you leave out the curly braces around the function body and there's only one expression in the function you don't need to use the return keyword. It's implied. In this case, the curly braces are being used to create and return an object, not those found around a function body, hence the parentheses.\n\nIn summary, for every 'action' you will create:\n1. an 'action type' defined as a string constant\n2. an action creator, a function that returns the 'action' object and has a 'type' property, plus any data (payload) to send to the store to update it.\n\nThen you will need to connect each action to a React component using the 'connect()' function and a 'mapDispatchToProps' argument. Every time an action is dispatched, the Redux 'store' will check all its 'reducers' for a matching action type, then run the code for that action type, which will then update the state.\n\nExample Reducer Function:\n\nexport const Campsites = (state = {campsites: [], action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_CAMPSITES:\n            return {...state, campsites: action.payload};\n        default:\n            return state;\n    }\n};\n\nReducers are considered to be part of the store. There are not multiple stores in Redux, there can be multiple reducers that handle different parts of the same state. Splitting the reducer creates different reducers to handle different parts of the state. So, the state that is referenced in the above reducer is just a section of the entire state object that this reducer is responsible for updating.\n\nIn the code above, the reducer takes its section of the existing state as its first argument. If that state does not exist yet then it's using default function parameters here to initialize it to this object which has the property campsite set to an empty array. Then for its second parameter it takes the action object that was dispatched, then it goes through the switch statement and if any of the action types in the switch cases match the action type of the action object it then creates the new state from the existing state updating it with the data from the action then it returns the new state to the store.\n\nNote that it's not required for the reducer to use the switch statement but its typically the best way to do it. You could use if statements or other ways to check for the action type the only thing that's required of this reducer is that it return its section of the state. Again, i will emphasize the Redux principle. That state is read only. You never mutate the existing state you only replace it with a new state. One of the ways that we can create the new state from the existing state is by use of the spread systax. It's not the only way but it's one that we'll often be used. Here we're spreading out the property key value pairs from the existing state. Doing this does not mutate the existing state. We're basically making a copy of it's properties. Again we add the payload from the action object into the 'campsites' property. Then we have all of this surrounded in curly braces that signify the creation of a new object, the object literal syntax.\n\nSo, recall that from the lesson on the spread syntax, since this campsites property is second in order in the object literal definition it will overwrite the campsites property that was spread from the existing state then if none of the action types matched, this default case will just return the existing state.\n\nSPLITTING THE REDUCER\n\nimport { CAMPSITES } from '../shared/campsites';\nimport { COMMENTS } from '../shared/comments';\nimport { PARTNERS } from '../shared/partners';\nimport { PROMOTIONS } from '../shared/promotions';\n\nexport const initialState = {\n    campsites: CAMPSITES,\n    comments: COMMENTS,\n    partners: PARTNERS,\n    promition: PROMOTIONS\n};\n\nexport const Reducer = (state = initializeState, action) => {\n    return state;\n};\n\nPreviously we had a single file reducer.js containing a single reducer function. That reducer is workign with the entire state which consists of four properties: campsites, comments, partners, and promotions. These properties are all independent of each other and can be managed separately. Often it will be useful to split up your reducer into multiple reducers and put them in separate files. However, Redux' create store function will only accept a single reducer as an argument. So, Redux also provides a function called combined reducer that will take all of your reducers and combine them into a single root reducer to use with create store. \n\n*/","import * as ActionTypes from './ActionTypes';\n\nexport const Comments = (state = { errMess: null, comments: []}, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_COMMENTS:\n            return {...state, errMess: null, comments: action.payload};\n\n        case ActionTypes.COMMENTS_FAILED:\n            return {...state, errMess: action.payload};\n\n        case ActionTypes.ADD_COMMENT:\n            const comment = action.payload;\n            return {...state, comments: state.comments.concat(comment)};\n\n        default:\n            return state;\n    }\n};\n\n/*\n\nLooking at the code, we will first import the corresponding data fromt the shared folder. So in this case we'll import the comments array from the comments module in the shared folder. \n\nNext we'll add a reducer function to handle each part of the state. We'll do this as a named export. We'll need to export it and give it a name, 'Comments'. The capital is not required. The arrow function is just a stylistic choice also. we could use a function declaration instead.\n\nAll reducers take two parameters. for the first parameter it takes the previous state, which may be referred to as the existing or current state; meanding the state in the current store and will be changed by this reducer. The first time a reducer is called the state will not exist. We'll use the default function parameter syntax to initialize the state, at least the part of the state that is handled by the reducer from the imported data. \n\nFor the second parameter, the reducer takes an action object. Then in the body of this function we'll check for the type of the action and return the state. It is not required to use a JS switch statement but it is common. \n\nimport { COMMENTS } from '../shared/comments';\n\nexport const Comments = (state = COMMENTS, action) => {\n    switch (action.type) {\n        default:\n            return state;\n    }\n};\n\nAt this point, there are no action types defined, so we set up a default case to return the state. Right now this reducer does not really do anything aside initializing this part of the state IF it didn't exist before. \n\nNow we will cause this reducer to update its part of the state when the ADD_COMMENT action is dispatched to the store. To do so we can ...\n\nimport * as ActionTypes from './ActionTypes';\n\nThis means we are importing from the ActionTypes module using the wildcard syntax as used before. \n\nThen in the switch statement we can ...\n\n        case ActionTypes.ADD_COMMENT:\n            const comment = action.payload;\n\n... which sets up a case for when the action type is ADD_COMMENT. This is where we put the content of action.payload into a new variable 'const comment'. Recall that the content of action.payload is an object. As a result, we can add more properties to it with ...\n\n            comment.id = state.length;\n\n\nBy adding the '.id', which will be the length of the comments array that is stored in this part of the state as well as adding the current date with ...\n\n            comment.date = new Date().toISOString();\n\nFinally we will return the new state by using the array concat method with ...\n\n            return state.concat(comment);\n\nThis is a built in JS method that lets us attach a new item to the end of the array without mutating the original array and creates a new array. \n\nIn contrast the 'push' array method would mutate the original array. So, we cannot use it. \n\nThe above line takes the existing state which is an array of objects and concatinates the new comment object to the end of the array and returns the new state to the redux store.\n\n\n\n\n*/","export const PARTNERS = [\r\n    {\r\n        id: 0,\r\n        name: \"Bootstrap Outfitters\",\r\n        image: \"/assets/images/bootstrap-logo.png\",\r\n        featured: false,\r\n        description: \"Bootstrap Outfitters supplies you with the gear you need at prices you can't beat.\"\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Git Out Expeditions\",\r\n        image: \"/assets/images/git-logo.png\",\r\n        featured: false,\r\n        description: \"Join Git Out Expeditions to explore new horizons with a group of other adventurers!\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Mongo Fly Shop\",\r\n        image: \"/assets/images/mongo-logo.png\",\r\n        featured: false,\r\n        description: \"Need a new fishing pole, a tacklebox, or flies of all kinds? Stop by Mongo Fly Shop.\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Node Outdoor Apparel\",\r\n        image: \"/assets/images/node-logo.png\",\r\n        featured: true,\r\n        description: \"From polar fleeces to swimsuits, hiking boots to waders, a visit to Node will be sure to get you covered.\"\r\n    }\r\n]","import { PARTNERS } from '../shared/partners';\n\nexport const Partners = (state = PARTNERS, action) => {\n    switch (action.type) {\n        default:\n            return state;\n    }\n};\n\n\n/*\nFLUX ARCHITECTURE - state management\ninitially react developers (facebook) used react with mvc patterns for creating the view. they found MVC did not scale well for a complex, large app like facebook with thousands of components. MVC became upredictable at scale, difficult to add new features without causing unexpected cascading effects in other parts of the code: bugs.\nlargely due to bi-directional design of MVC data flow.\nflux has a uniquely defined one way data flow. instead of model, view, controller it separates its view into action, dispatcher, store, and view.\nwhen an action enters the system it is routed to the dispatcher who then routes the action to the appropriate store. the stores are repositories for the application state and logic. then the view updates whenever the store says a change has taken place. then from the view another action can enter the system due to some user interaction. the dispatcher ensures no other actions are processed until its finished updating the store. thus, cascading effects are prevented and data integrity is protected. \n\nFUNDAMENTAL PRINCIPLES OF *** REDUX ***\nlibrary created by Dan Abramov for use with React co-written with Andrew Clark, author of Flummox. also inspired by the Elm functional programming language and three JS libraries: immutable.js, Baobab.js, and RxJS.\nit is defined as \"a predictable state container for JS apps\".\nprovides code that stores application state and a consistent way to access and update the state from anywhere in the app. \nnot just for react - can be used with any JS app.\nthe course project container component Main stores state and passes data as props to several presentational components; changes to state only occur in Main. \nin the real world - Redux may have 100s or 1000s of components with more hierarchies and groupings. \nstate management becomes much more tricky at scale; redux handles predictable, consistent state management.\nthree fundamental principles: \n1. Single Source of Truth\n    Flux: there can be multiple stores; dispatcher directs actions to the right one.\n    Redux: only one store; holds a single state object tree that contains the whole state of your entire application as objects within that tree.\n    Object tree: tree-like data structure; each node contains an object; DOM is another example of an object tree.\n2. State is Read Only\n    only way to change state is with an 'action' - an object that describes what happened.\n3. Changes are made with Pure Functions\n    these functions are called 'reducers'.\n    pure functions that have no side effects and given the same inputs, always returns the same outputs.\n    Ex.: Math.floor() is a pure function - given a number, always gives same result back, does nothing else; Math.random() is an impure functions - will always give a different output.\n    a redux reducer is a pure function that takes the previous state an an action and returns the next state. \n    similar in concept to array methods like map that return a new array and do not mutate the original - reducers always return new state objects instead of mutating the previous state. \n    programming concept: immutabliity -- data does not get mutated, only replaced by new data. \n    objects are cheap to create, and this approach creates advantages such as \"time travel\" - able to step back and forward from previous state.\nthink of it like frames in an animation sequence or a flipbook - instead of redrawing the frame / page, a new one is created with changes; you can flip back and forth.\n- in Flux we have Action > Dispatcher > Store(s) > View (dispatcher routes to diff stores)\n- in Redux we have Actions > Reducers > a Store > View (one store - no need for dispatcher)\nThe dispatch in flux works like a traffic controller that routes actions to different stores. With only one store that is no longer a major roll. \nBut user interactions within the view in Redux do trigger a dispatch of actions which are sent to reducers which in turn creates a new state inside the store. Then the view will change and updates to reflect the new changes. \n\nWith flux it is striclty a one way data flow. reducers don't talk back to actions and the store doesn't talk back to reducers. The data flows in one direction. \n\nThe react-redux library uses the following functions: \n1. createStore()\n    Creates the Redux store which holds the state (as an object tree)    \n2. connect()\n    Generates container component that wraps around other components to subscribe them to the store.\n3. mapStateToProps()\n    Passed as callback to connect() function\n    Called whenever state changes\n    Receives entire state tree & returns an object that contains only the data needed by the component.\n4. <Provider>\n    Wraps around the root component of the app\n    Takes the store variable as an attribute\n    Makes store accessible to all child components that are connected using connect() function\n\nTHE MVC DESIGN PATTERN aka MVC FRAMEWORK\na software design pattern is not code, not a library.\nit is an approach / solution to how to structure an application\ncreated in the '70s for use with desktop application GUIs\ntypically used to develop presentation layer / client-side, popular in web dev\nfacilitates independent development, testing, maintanence of different parts of an app\nthe presentation layer is divided into three parts: Model, View, Controller\nModel: handles application state and logic\n    stores the main application logic and data for the frontend. not a database but the data that's been loaded into the application from the database and the frontend code that sends requests to and receives requests from the database. it will also respond to queries from the frontend, being queries about its state from the view or controller and respond to requests to update its state from the controller. May also notify view/controller when its state changes. \nView: presents information to the user\n    the view renders the model formitable for display, typically a UI elemnent. can query the model directly about its state and update iself based on technique.\nController: mediate between model and view\n    the controller receives and processes information recevied from the view (from user interaction, ex, mouse events, form submission), then instruct both the model and view to update its state.\n*/","import * as ActionTypes from './ActionTypes';\n\nexport const Promotions = (state = { isLoading: true,\n                                        errMess: null,\n                                        promotions: [] }, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_PROMOTIONS:\n            return {...state, isLoading: false, errMess: null, promotions: action.payload};\n\n        case ActionTypes.PROMOTIONS_LOADING:\n            return {...state, isLoading: true, errMess: null, promotions: []}\n\n        case ActionTypes.PROMOTIONS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload};\n            \n        default:\n            return state;\n      }\n};","export const InitialFeedback = {\n    firstName: '',\n    lastName: '',\n    phoneNum: '',\n    email: '',\n    agree: false,\n    contactType: 'Phone',\n    feedback: ''\n};","import React, { Component } from 'react';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nclass App extends Component {\n    \n    render() {\n        const store = ConfigureStore();\n\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <div className=\"App\">\n                        <Main />\n                    </div>\n                </BrowserRouter>\n            </Provider>\n        );\n    };\n}\n\nexport default App;\n\n","import {createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Campsites } from './campsites';\nimport { Comments } from './comments';\nimport { Partners } from './partners';\nimport { Promotions } from './promotions';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { createForms } from 'react-redux-form';\nimport { InitialFeedback } from './forms';\n\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            campsites: Campsites,\n            comments: Comments,\n            partners: Partners,\n            promotions: Promotions,\n            ...createForms({\n                feedbackForm: InitialFeedback\n            })\n        }), \n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n};\n\n/*\n\nCOMBINE REDUCERS\n\nimport {createStore, combineReducers} from 'redux';\nimport { Campsites } from './campsites';\nimport { Comments } from './comments';\nimport { Partners } from './partners';\nimport { Promotions } from './promotions';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            campsites: Campsites,\n            comments: Comments,\n            partners: Partners,\n            promotions: Promotions\n        })\n    );\n\n    return store;\n};\n\nThe create store function from Redux requires a reducer as an argument but will only accept a single reducer. So to resolve we combine the reducers using the combine reducer function which we'll need to immport from Redux and then import all the reducers to combine; campsites, comments &tc. Notice there is only one dot in the file paths because this file, configureStore.js, is in the same folder as the reducer files (redux folder). Then inside the createStore function we create a call to combine reducers and pass it an object that contains all reducers as properties. The property identifier, the names of the properties, defines how the data from each reducer will be kept in the overall state object tree. \n\n\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n//import * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'typeface-lobster';\nimport 'typeface-open-sans';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n\n// If you want your app to work offline and load faster, you can change \n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}